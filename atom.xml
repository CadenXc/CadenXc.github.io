<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CadenXc&#39;s Blog</title>
  
  
  <link href="https://cadenxc.com/atom.xml" rel="self"/>
  
  <link href="https://cadenxc.com/"/>
  <updated>2025-05-06T15:59:08.257Z</updated>
  <id>https://cadenxc.com/</id>
  
  <author>
    <name>CadenXc</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>学习Cmake</title>
    <link href="https://cadenxc.com/2025/05/06/%E5%AD%A6%E4%B9%A0Cmake/"/>
    <id>https://cadenxc.com/2025/05/06/%E5%AD%A6%E4%B9%A0Cmake/</id>
    <published>2025-05-06T15:58:54.000Z</published>
    <updated>2025-05-06T15:59:08.257Z</updated>
    
    <content type="html"><![CDATA[<p>我看网上也要很多不错的Cmake教程，这里就写些我的心得体会。</p><span id="more"></span><p>先找到一个要学习的用cmake构建的源码。我在Github上找了跟着The Cherno学习的一个用cmake构建的游戏引擎。看到别人和自己做类似的事情成功了，会增加自己前进的信心。</p><p>自己跟着写（learn by doing）。因为游戏引擎比较复杂，Cmake文件从少量的文件开始编译比较好，参考原项目的写法。</p><p>先让构建一个成功运行的代码，不用管高级的用法。后面遇到不知道如何写的时候就是学习的好时机。</p><p>注意有些Cmake有的命令很长，容易写错。没运行成功可能就是这里出问题。</p><p>如果确保自己写的Cmake文件没问题，重新编译后还是不通过，可以试试删除build文件夹重新编译。</p><p>我觉得我的Cmake水平只是入门，可以编译一个没有，没有测试，自定义操作的项目。但是我不怕编译任何一个项目，不是学不会，而是没学，你总是可以找到方法让代码编译成功。不记得答案没关系，知道在哪里寻找答案就行。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;我看网上也要很多不错的Cmake教程，这里就写些我的心得体会。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>阅读《代码大全》</title>
    <link href="https://cadenxc.com/2025/04/27/%E9%98%85%E8%AF%BB%E3%80%8A%E4%BB%A3%E7%A0%81%E5%A4%A7%E5%85%A8%E3%80%8B/"/>
    <id>https://cadenxc.com/2025/04/27/%E9%98%85%E8%AF%BB%E3%80%8A%E4%BB%A3%E7%A0%81%E5%A4%A7%E5%85%A8%E3%80%8B/</id>
    <published>2025-04-27T10:26:23.000Z</published>
    <updated>2025-05-05T08:15:43.274Z</updated>
    
    <content type="html"><![CDATA[<p>《代码大全》（code complete），非常有名的书籍，虽然是2000年初的作品，依然非常有用。</p><span id="more"></span><p>我读了两遍，先是读到英文版，后来又读了一边中文版。<br>读英文版时，我还想着“routine”该怎么翻译，结果看中文翻译翻成了“子程序”，意思没原文丰富。中英文版都不错完全推荐。</p><p>这本书讲的内容真的是软件工程的基础，跟我看完了感觉在各个方面长见识，但又很难说是什么，感觉就是为设计软件打了地基，知识成为了我的血液。书里的代码编写、变量命名、注释等我在其他的书籍视频里看过好几次，这本书把软件的方方面面串联起来，给了我一个大的画画。先读这本书会为软件工程打一个很好的基础。</p><p>全书令我影响深刻的观点论述有：</p><ul><li>用隐喻来学习；</li><li>软件工程就是管理复杂度；</li><li>不要陷进语言，自己定义用法；</li><li>伪代码编程过程；</li><li>最后几章的关于人的个性，布局排版的艺术。</li></ul><p>有些东西确实不太懂，毕竟我还没有在真实的工业环境里工作过，设计、编码、测试等技能没有经过检验。不只这本书，《clean code》里的后半部分我就不懂；《程序开发心理学》我读得挺有意思，但是每章结束后问管理者和程序员的问题我无法回答；不过《人月神话》没有讨论什么技术，谈的是思想，写得也好，不愧对它的声誉。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;《代码大全》（code complete），非常有名的书籍，虽然是2000年初的作品，依然非常有用。&lt;/p&gt;</summary>
    
    
    
    
    <category term="书籍" scheme="https://cadenxc.com/tags/%E4%B9%A6%E7%B1%8D/"/>
    
  </entry>
  
</feed>
