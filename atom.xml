<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CadenXc&#39;s Blog</title>
  
  
  <link href="https://cadenxc.com/atom.xml" rel="self"/>
  
  <link href="https://cadenxc.com/"/>
  <updated>2025-06-16T02:41:01.317Z</updated>
  <id>https://cadenxc.com/</id>
  
  <author>
    <name>CadenXc</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>新电脑配置指南</title>
    <link href="https://cadenxc.com/2025/06/16/%E6%96%B0%E7%94%B5%E8%84%91%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97/"/>
    <id>https://cadenxc.com/2025/06/16/%E6%96%B0%E7%94%B5%E8%84%91%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97/</id>
    <published>2025-06-16T02:37:04.000Z</published>
    <updated>2025-06-16T02:41:01.317Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、基础设置"><a href="#一、基础设置" class="headerlink" title="一、基础设置"></a>一、基础设置</h2><ul><li><p><strong>用户名设置</strong><br>系统激活注册时建议使用英文用户名。某些开发工具对路径兼容性较差，含中文可能导致异常。</p></li><li><p><strong>语言与界面优化</strong>  </p><ul><li>添加英文语言包，方便中英文切换。  </li><li>在任务栏设置中关闭“小组件”和“任务视图”，并隐藏搜索框，让界面更简洁清爽。</li></ul></li><li><p><strong>系统优化</strong>  </p><ul><li>将桌面路径迁移到 D 盘（或任意非 C 盘路径），减轻系统盘压力。  </li><li>打开以管理员身份运行的 PowerShell，执行以下命令关闭休眠功能，进一步节省 C 盘空间：  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powercfg -h off</span><br></pre></td></tr></table></figure><blockquote><p><em>个人观点：Windows 的休眠功能并不理想，平时直接关机更为稳妥。</em></p></blockquote></li></ul></li><li><p><strong>安全策略调整</strong><br>在微软电脑管家（Microsoft PC Manager）中，将除 C 盘以外的所有磁盘添加为“信任磁盘”或“排除项”，避免开发时频繁弹出安全提示。</p></li></ul><hr><h2 id="二、D-盘目录结构"><a href="#二、D-盘目录结构" class="headerlink" title="二、D 盘目录结构"></a>二、D 盘目录结构</h2><p>为了避免路径问题，所有文件夹名使用英文，并统一集中管理：</p><ul><li><code>BrowserDownload</code>：浏览器下载目录（如果是 <code>BlowserDownload</code> 是故意拼错可保留）  </li><li><code>Caden</code>：我的英文名，放一些临时文件或杂项  </li><li><code>Code</code>：各类项目代码存放地  </li><li><code>NetworkDiskAndBtDownload</code>：网盘及 BT 下载文件存储  </li><li><code>Repositories</code>：存放从 GitHub 克隆下来的仓库  </li><li><code>Software</code>：软件下载目录</li></ul><hr><h2 id="三、软件安装与配置"><a href="#三、软件安装与配置" class="headerlink" title="三、软件安装与配置"></a>三、软件安装与配置</h2><h3 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h3><ul><li>安装 <strong>Google Chrome</strong>，并将其和系统自带的 <strong>Microsoft Edge</strong> 的默认下载路径设置为 <code>D:\BrowserDownload</code>。</li></ul><h3 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h3><ul><li><a href="https://git-scm.com/">Git</a></li><li><a href="https://www.sourcetreeapp.com/">Sourcetree</a>：Git 图形化工具</li><li><a href="https://github.com/PowerShell/PowerShell">PowerShell</a>：推荐配合 <a href="https://ohmyposh.dev/">Oh My Posh</a> 美化终端</li><li><a href="https://github.com/BeyondDimension/SteamTools">Watt Toolkit</a>：可用于 GitHub 下载加速</li></ul><h3 id="输入法与语言工具"><a href="#输入法与语言工具" class="headerlink" title="输入法与语言工具"></a>输入法与语言工具</h3><ul><li><a href="https://rime.im/">小狼毫输入法</a><br>配置 <a href="https://github.com/iDvel/rime-ice">雾凇拼音</a>，并使用小鹤双拼方案</li><li><a href="https://www.eudic.net/">欧陆词典</a>：好用的英文词典</li><li><a href="https://github.com/Pixpin/Pixpin">PixPin</a>：截图标注工具，开源且好用</li></ul><blockquote><p>其他软件就不一一列举了，可以参考我写的另一篇 <a href="https://cadenxc.com/2025/06/02/%E4%BB%A3%E7%A0%81%E4%B9%8B%E5%A4%96%E7%9A%84%E6%8E%A8%E8%8D%90/">推荐博客</a>。</p></blockquote><hr><h2 id="四、数据迁移建议"><a href="#四、数据迁移建议" class="headerlink" title="四、数据迁移建议"></a>四、数据迁移建议</h2><ul><li><strong>浏览器数据</strong>：登录账号同步书签和插件即可。</li><li><strong>项目代码 &#x2F; 配置文件</strong>：使用 Git 进行云端同步，方便管理。</li><li><strong>敏感或私密数据</strong>：不建议上传云盘，可通过 U 盘或局域网方式传输。</li></ul><hr><p>如果你有更好的建议或配置方式，欢迎在评论区留言交流！</p>]]></content>
    
    
    <summary type="html">本文记录我配置新的Windows 11电脑的过程，包含个人的一些使用偏好，供有相似需求的朋友参考。</summary>
    
    
    
    <category term="经验分享" scheme="https://cadenxc.com/categories/%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="Windows" scheme="https://cadenxc.com/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>《废都物语》游玩体验</title>
    <link href="https://cadenxc.com/2025/06/09/%E3%80%8A%E5%BA%9F%E9%83%BD%E7%89%A9%E8%AF%AD%E3%80%8B%E6%B8%B8%E7%8E%A9%E4%BD%93%E9%AA%8C/"/>
    <id>https://cadenxc.com/2025/06/09/%E3%80%8A%E5%BA%9F%E9%83%BD%E7%89%A9%E8%AF%AD%E3%80%8B%E6%B8%B8%E7%8E%A9%E4%BD%93%E9%AA%8C/</id>
    <published>2025-06-09T14:43:01.000Z</published>
    <updated>2025-06-09T14:49:24.461Z</updated>
    
    <content type="html"><![CDATA[<p>尽量不剧透。</p><hr><p>这个游戏剧情融合了各种神话，虚构了一个丰富的大河世界。<br>主角有四个出身可以选，四个出身的线大体相同，但又有各自独特的剧情，每条线各自揭开了部分剧情的谜底。<br>可以在酒馆里集结队友，踏上旅途，像跑团。游戏内有多名队友，陪你冒险，都有着独特的个性，喜欢某位角色可以一直带着，可能会解锁队友个人的独特剧情。<br>在游戏过程中也有挺恶搞的地方，比如睡美人、怪仙，夜种王，也许会让你心领神会，忍俊不禁。</p><p>个人是按盗贼-&gt;骑士-&gt;法师-&gt;贤者的顺序玩了共计四周目，并不是那种多周目大佬。<br>游戏难度我选的普通，因为游戏的的多周目有继承机制，所以在我玩的周目里最难的是第一周目的盗贼出身。身板脆，不知道隐藏宝箱在哪里，对地图多大和谜题没有底，完全对世界陌生，这是我开荒的体验。</p><p>挺过初期的困难后就渐渐被玩法和剧情吸引了。 作为一个宝可梦爱好者，对西方奇幻和跑团也颇有兴趣的人，这个经典RPG战斗，那些非战斗的技能和以前宝可梦里的秘传技能等在战斗外的地方也可以使用的技能类似，龙与地下城式的队友集结和地图探险，不错。但是剧情就没有仔细看，以至于有的地方卡关查攻略了。不过这样也可以，我本来玩的时候也没有想着剧情会多优秀，到了后面几周目才渐渐琢磨出味道来，之后看了别人剧情梳理我才对剧情有一个完整的概念。</p><p>本来第一周目打得我都快弃坑了，不经意间在一次回档的时候没有选择打死龙蛋而是试着给它命名，结果孵出来了一个龙女，虽然这剧情有些熟悉但是我喜欢。想想这我之前不就算是错过了吗，鬼使神差让我读了一个前一点的档，出来一个龙女儿，这我得带着她通关呀。就继续打了，之后渐渐喜欢上了这个游戏。</p><p>游玩体验最好的是第四周目，打最终boss时，主角是贤者防御高，先给队友加攻加防，然后一直放回复技能就行，输出就靠队友，无脑点威力最高的技能。</p><p>别被画风劝退了，挺不错的。或者也可以等等重置版。</p>]]></content>
    
    
    <summary type="html">游戏不错。</summary>
    
    
    
    
    <category term="游戏" scheme="https://cadenxc.com/tags/%E6%B8%B8%E6%88%8F/"/>
    
  </entry>
  
  <entry>
    <title>游戏引擎学习之旅（4）批渲染和调试</title>
    <link href="https://cadenxc.com/2025/06/08/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85%EF%BC%884%EF%BC%89%E6%89%B9%E6%B8%B2%E6%9F%93%E5%92%8C%E8%B0%83%E8%AF%95/"/>
    <id>https://cadenxc.com/2025/06/08/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85%EF%BC%884%EF%BC%89%E6%89%B9%E6%B8%B2%E6%9F%93%E5%92%8C%E8%B0%83%E8%AF%95/</id>
    <published>2025-06-08T08:19:38.000Z</published>
    <updated>2025-06-08T08:27:11.963Z</updated>
    
    <content type="html"><![CDATA[<p>上次博客之后，先是抽象出了一个Renderer2D的类。这个类调用了是Renderer部分其他的代码，不知道OpenGL或者其他图形学API的具体实现，这样用户使用的时候只需要调用提供的静态函数就行了换图形学API是不影响用户写好的代码，是一个相当清晰的不错的设计。</p><p> 接下来就是在这个已经使用可以工作的Rednerer2D类里实现批渲染（Batch Rendering）。</p><p> 我对批渲染很有好感，这个得加进引擎里。之前用SDL2画地牢的地图时，我试着在更新初始化地图值时把绘制命令放在了for循环，导致每添加到一个图片到SDL_surface里就会调用一次绘制命令。这样地图绘制时是从上往下一点一点渲染，花了一百多秒完成。之后把绘制命令拿出for循环，这样就是在等Surface一次更新完后在绘制，地图一瞬间就绘制好了。</p><p>实现批渲染的方法。之前的实现是用一个数组存储，把位置纹理坐标等放在起，每个图形都是单独的一个数组，现在把数组改成结构体，不同的成员变量对应了不同属性，更新的值会插入在一个数组里。另有一个结构体来管理各种数值，前面的和纹理数组都在这个里面当成为变量。声明上述为一个静态结构体，每次调用是设置的数值等都在这里设置，这样在绘制的时候只使用结构体里的一个索引数组，渲染是就把前面的整个当成是一个图形绘制。</p><p>不过在添加纹理的时候出了一个Bug。我只绘制纯颜色块时正确，绘制带纹理的方块时候就是黑的，没有渲染出纹理，而本该是纯颜色的方块却有渲染出了纹理。</p><p>那就开始Debug吧。我先是查看代码，看了最近两次提交代码的修改部分，没发现问题。然后对这个错误进行测试，发现当绘制多个带纹理的方块时，本该是纯颜色的方块会渲染出最后一个绑定的纹理。问题出在了纹理设置上。当我在纹理渲染的函数里手动把slot 修改为0.0f时，渲染出了该有给的纹理，把slot设为没有纹理的绑定的值（比如3）就会变成默认的白色，说明这是纹理slot绑定出的问题。然后我找到了纹理绑定的那段代码，传了slot值（不指定就是默认复制的0），功能正常。</p><p>我有些震惊与这样的错误。我现在学习这个引擎的方式的流程如下。</p><ol><li>看一遍视频，了解本次代码该实现的效果；</li><li>点开GitHub对应提交的代码提交，理解代码的设计和实现；</li><li>编写代码；</li><li>改错；</li><li>提交到GitHub仓库。</li></ol><p>我再次看视频发现视频里是有传入参数的，所以这个提交的代码就没有达成视频里的功能。我默认认为代码要测试无误才提交，也相信这个是对的。但是TheCherno这个大牛居然在提交的时候没有注意到这个。</p><p>也许TheCherno是想提醒我要多思考，不要光剽窃代码。想告诉我大牛也会有不小心的时候，想说我也可以成为大牛。</p><p>谢谢你，TheCherno！</p>]]></content>
    
    
    <summary type="html">视频看到了第66节了。</summary>
    
    
    
    
    <category term="游戏引擎" scheme="https://cadenxc.com/tags/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/"/>
    
  </entry>
  
  <entry>
    <title>代码之外的推荐</title>
    <link href="https://cadenxc.com/2025/06/02/%E4%BB%A3%E7%A0%81%E4%B9%8B%E5%A4%96%E7%9A%84%E6%8E%A8%E8%8D%90/"/>
    <id>https://cadenxc.com/2025/06/02/%E4%BB%A3%E7%A0%81%E4%B9%8B%E5%A4%96%E7%9A%84%E6%8E%A8%E8%8D%90/</id>
    <published>2025-06-02T11:59:47.000Z</published>
    <updated>2025-06-16T00:03:50.705Z</updated>
    
    <content type="html"><![CDATA[<h2 id="浏览器插件"><a href="#浏览器插件" class="headerlink" title="浏览器插件"></a>浏览器插件</h2><ul><li><a href="https://microsoftedge.microsoft.com/addons/detail/onetab/hoimpamkkoehapgenciaoajfkfkpgfop">OneTab</a>：压缩页面，减少内存占用，方便搜集临时的不想的收藏的页面，配合浏览器的分组功能效果更佳；</li><li><a href="https://github.com/iorate/ublacklist">uBlacklist</a>：屏蔽网站用，清理 [内容农场]；</li><li><a href="https://microsoftedge.microsoft.com/addons/detail/get-rss-feed-url/pgbelohmepchkohpdldadopkblkgbjom">Get RSS Feed URL</a>：获取当前网页的RSS订阅；</li><li><a href="https://microsoftedge.microsoft.com/addons/detail/%E5%BE%AE%E4%BF%A1%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E5%8A%A9%E6%89%8B/iblnlnnpkbhnempmcbioeholmemingmo">微信读书笔记助手</a>：复制网页版微信读书画线评论；</li><li><a href="https://microsoftedge.microsoft.com/addons/detail/immersive-translate-tra/amkbmndfnliijdhojkpoglbnaaahippg">Immersive Translate</a>：内嵌式网页翻译；</li><li><a href="https://microsoftedge.microsoft.com/addons/detail/marinara-pomodoro%C2%AE-assis/ncpfbgmhdpgbgmdmkfcddiemjhebegin">Marinara: Pomodoro® Assistant</a>：一个番茄工作法的番茄钟。</li></ul><h2 id="Windows工具"><a href="#Windows工具" class="headerlink" title="Windows工具"></a>Windows工具</h2><ul><li><a href="https://www.sumatrapdfreader.org/free-pdf-reader">Sumatra PDF</a>：功能强大的电子书阅读器，可以打开种电子书格式；</li><li><a href="https://rime.im/">小狼毫输入法</a>：好用的输入法软件；</li><li><a href="https://keepass.info/download.html">KeePass</a>：密码管理工具；</li><li><a href="https://geekuninstaller.com/">Geek</a>：知名卸载工具；</li><li><a href="https://www.cnblogs.com/hui-tong/p/18085042">Qbittorrent</a>：磁力下载软件，配合资源下载网址<a href="https://piratebayproxy.net/zh/">海盗湾</a>使用；</li><li><a href="https://sourceforge.net/projects/spacesniffer/">SpaceSniffer</a>：磁盘空间分析软件；</li><li><a href="https://github.com/easymodo/qimgv">qimgv</a>：图片浏览器：觉得Windows自带的图片显示不好用，可以试试这个；</li><li><a href="https://pixpin.cn/">PixPin</a>：截图贴图工具；</li><li><a href="https://apps.microsoft.com/detail/xp8bsbgqw2dks0?hl=zh-cn&gl=cn">PotPlayer</a>：可能是最好用的视频播放器；</li><li><a href="https://github.com/Wox-launcher/Wox">Wox</a>：调用了<a href="https://www.voidtools.com/zh-cn/">Everything</a>的软件快速启动器；</li><li><a href="https://obsidian.md/">Obsidian</a>：markdown笔记软件我选的这个，免费，双链笔记功能强大，推荐配合<a href="https://notes.oldwinter.top/%E5%B8%B8%E9%9D%92%E7%AC%94%E8%AE%B0">常青笔记</a>，<a href="https://forum-zh.obsidian.md/t/topic/134">下载插件</a>能让软件更好用；</li><li><a href="https://steampp.net/">Watt Toolkit</a>：加速器，连接 Github 和 Steam；</li><li><a href="https://mfiles.maokebing.com/">爱传送</a>：手机和电脑跨平台传送文件；</li><li><a href="https://zh-cn.libreoffice.org/">LibreOffice</a>：Wps和Micro Office的开源平替；</li><li><a href="https://www.gimp.org/">GIMP</a>：Adobe Photoshop 的开源平替；</li><li><a href="https://uuyc.163.com/">网易UU远程</a>：远程控制电脑；</li><li><a href="https://obsproject.com/?ref=openalternative.co">OBS</a>：开源视频录制软件；</li><li><a href="https://www.sourcetreeapp.com/">Sourcetree</a>：Git 图形界面工具；</li><li><a href="https://cubox.pro/">Cubox</a>：跨平台浏览器页面管理。</li></ul><h2 id="安卓App"><a href="#安卓App" class="headerlink" title="安卓App"></a>安卓App</h2><p>在应用商店、github或者浏览器上能找到：</p><ul><li><a href="https://github.com/foobnix/LibreraReader">Librera</a>：打开Txt，PDF，Mobi等各种格式的文件，用来读书；</li><li><a href="https://weread.qq.com/">微信读书</a>：电子书书城，阅读购买电子书；</li><li><a href="https://flomoapp.com/">flomo</a>：有浏览器页面，互传文字挺方便。</li><li><a href="https://habitica.com/">Habitica</a>：游戏化任务管理。</li><li>小宇宙：听播客；</li><li>ZArchiver&#x2F;MT Manager：手机文件管理，压缩包解压。</li><li>Rolly RSS阅读器：RSS阅读工具。</li><li>小青帐：记账软件。</li></ul><h2 id="推荐学习的技能"><a href="#推荐学习的技能" class="headerlink" title="推荐学习的技能"></a>推荐学习的技能</h2><ul><li><a href="https://api.ihint.me/shuang/">双拼练习</a>：一种打字拼音输入法，有多种映射方式，选一种即可；</li><li><a href="https://markdown.com.cn/intro.html#markdown-%E6%98%AF%E4%BB%80%E4%B9%88">Markdown</a>：轻量级的标记语言，方便排版，写笔记，博客文章用；</li><li><a href="https://www.overleaf.com/learn">Latex</a>：一种编程语言，方便排版，写论文用。</li></ul>]]></content>
    
    
    <summary type="html">推荐一些非技术相关的浏览器插件/软件/技能。</summary>
    
    
    
    
    <category term="分享" scheme="https://cadenxc.com/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>《重构 改善既有代码的设计》简评</title>
    <link href="https://cadenxc.com/2025/05/29/%E3%80%8A%E9%87%8D%E6%9E%84%20%E6%94%B9%E5%96%84%E6%97%A2%E6%9C%89%E4%BB%A3%E7%A0%81%E7%9A%84%E8%AE%BE%E8%AE%A1%E3%80%8B%E7%AE%80%E8%AF%84/"/>
    <id>https://cadenxc.com/2025/05/29/%E3%80%8A%E9%87%8D%E6%9E%84%20%E6%94%B9%E5%96%84%E6%97%A2%E6%9C%89%E4%BB%A3%E7%A0%81%E7%9A%84%E8%AE%BE%E8%AE%A1%E3%80%8B%E7%AE%80%E8%AF%84/</id>
    <published>2025-05-29T12:43:21.000Z</published>
    <updated>2025-05-29T12:47:52.289Z</updated>
    
    <content type="html"><![CDATA[<p>读<a href="https://book.douban.com/subject/30468596/">本书</a>的缘由看这里：<a href="https://cadenxc.com/2025/05/27/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85%EF%BC%883%EF%BC%89%E6%B8%B2%E6%9F%93%E5%99%A8%E9%87%8D%E6%9E%84/">游戏引擎学习之旅（2）渲染器重构</a>。</p><p>我读完了感觉不错。和<a href="https://book.douban.com/subject/4199740/">《代码整洁之道》</a>一样，我现在还是一个新人，还没有没有遇到什么真实的复杂情况，有些需要重构的坏味道没有遇到，我就是凭我自己的感觉。</p><p>个人来说，他的前几章讲的思想原则就值得去看。</p><ul><li>重构的最佳时机是加入新功能之前；</li><li>重构要小步走；</li><li>何时不该重构；</li><li>重构会让开发更快。</li></ul><p>书的后面就是在讲重构的方法了，提供了一堆术语，方便和别人交流。这些反而就不是很重要了，需要的时候查表就行了。书在最后还贴心得给了一个坏味道与重构手法速查表。</p><p>确实是实用的书，当成词典就行了。</p>]]></content>
    
    
    <summary type="html">是一本久负盛名的书，经常会出现在推荐书单的书。</summary>
    
    
    
    
    <category term="书籍" scheme="https://cadenxc.com/tags/%E4%B9%A6%E7%B1%8D/"/>
    
  </entry>
  
  <entry>
    <title>游戏引擎学习之旅（3）渲染器重构</title>
    <link href="https://cadenxc.com/2025/05/27/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85%EF%BC%883%EF%BC%89%E6%B8%B2%E6%9F%93%E5%99%A8%E9%87%8D%E6%9E%84/"/>
    <id>https://cadenxc.com/2025/05/27/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85%EF%BC%883%EF%BC%89%E6%B8%B2%E6%9F%93%E5%99%A8%E9%87%8D%E6%9E%84/</id>
    <published>2025-05-27T03:17:19.000Z</published>
    <updated>2025-05-27T03:19:38.547Z</updated>
    
    <content type="html"><![CDATA[<h2 id="重构的理由"><a href="#重构的理由" class="headerlink" title="重构的理由"></a>重构的理由</h2><p>跟着视频写为什么需要重构呢？你只需要从视频或者代码库里把东习 <em>steal</em> 出来不就行了吗？<br>这是因为我在看他的视频的时候感觉非常熟悉，他在讲 OpenGL 的时候抽象出了一个类似的渲染器（Renderer），我想就把学习 OpenGL 写的代码哪过来不久行了吗？。确实行了，屏幕上有预期的图片绘出。但是他的设计思路是把渲染的 API 和具体的图形学 API 的实现分开，方便后续扩展API，比如Vulkan，可以让使用引擎的人不知道渲染的具体实现。<br>我的当前的代码结构没有这个抽象的 API ，直接就是 OpenGL 的具体实现，这就我直接加上的代码就不合适了。于是就开启了重构工作。</p><h2 id="开始重构"><a href="#开始重构" class="headerlink" title="开始重构"></a>开始重构</h2><p>我从 The Cherno 那里 <em>steal</em> 了抽象 API ，我要做的就是让我的现在类继承抽象的 API 。我感觉没什么困难的，可是我基本上是第一次做这种类似的工作，修改了一处就报错，代码无法运行，有一种无从下手的感觉。从 The Cherno 那里 <em>steal</em> 的抽象 API是阻挡我修改的难关，不仅成员函数的参数和数量不同，里面的数据也进行了封装，成员变量的类型和数量不同，不能直接加上继承就让代码运行。种种限制让我对着代码发愁。这很挫败，难道我应该跟着视频走，回退到没有合并代码的版本吗？有没有什么技巧可以帮我重构呢？</p><p>还真有，我想起来了这本著名的<a href="https://book.douban.com/subject/30468597/">《重构 改善既有代码的设计》</a>，之前我一直用不上就没有读，现在是时候读读这本书了。这本书给了我很大的帮助。对我来说学到的重要的思想是：小步走，让代码保持可工作状态和重构会让开发更快。这让我静下心来，不想着一步到位，而是慢慢调整代码。我一步步得重构了原本的代码，并且加深了我对这整个渲染器的设计的理解。</p><h2 id="在重构中理解设计思路"><a href="#在重构中理解设计思路" class="headerlink" title="在重构中理解设计思路"></a>在重构中理解设计思路</h2><p> 我在The Cherno 的 Layout 的布局的 API 传入的参是 自定义的枚举类型，float2 就表示两个float类型的布局，把原本的类型和个数这个参数给些在了一起，我在用这个自定义类形的参数替代原来的 float 和 unsigned int 时， 想着这里，肯定有一个把这个变量变换为原来的两个的函数，我果然看到了两个相关的函数，一个计算大小，一个返回类型。</p><p> 他的顶点数组的创建用的是Create()函数，我之前没有意思到，我重构的时候意识才到这个函数的作用是让调用渲染器时只包含抽象 API 的头文件而不用与 具体的OpenGL类的图形学 API 的实现相关。</p><p>RendererAPI，RenderCommand，Renderer类之间的关系是后者调用前者。 渲染器的 Draw 和 Clear 是一个静态函数时，不用具体实现一个Renderer类。这里整个Renderer的实现的接口都是方便引擎的使用者调用。我在这里重构了几天既让用户方便，也让开发者有一个结构更加合理的代码库，方便后续开发。</p><h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p> 这种跟上思路的感觉很棒。</p><p>这次没有学太多的新东西，基本上是 OpenGL 系列里的东西，这是的重点是重构。</p><p>我确实做的是重构，写了几天，运行的结果还是和之前一模一样。难怪书里开头问了一个问题：如何跟经理解释重构的意义。</p><p>书里说重构的最佳时机就是在添加新功能之前，这个我也认同，我就是在添加相机功能之前重构代码。</p><p>提高了我重构的意识。当代码报了一个头文件循环包含的错误时，我想这是一个坏味道，就检查了其他的代码的头文件的包含，去掉多余的。</p><p>在重构的过程中真正学到了东西，而不是从theCherno那里steal。也难怪<a href="https://www.norvig.com/21-days.html">Peter Norvig说要learning by doing</a>了。</p><p> 我看书的时候意识到theCherno的教学中的代码也是在进行重构。先在屏幕上花画出一个三角型，在不改变显示效果的情况下对代码进行修改，提高代码的可读性和可扩展性，提高代码质量。</p>]]></content>
    
    
    <summary type="html">OpenGL渲染器的实现和重构</summary>
    
    
    
    
    <category term="游戏引擎" scheme="https://cadenxc.com/tags/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/"/>
    
  </entry>
  
  <entry>
    <title>游戏引擎学习之旅（2）事件系统</title>
    <link href="https://cadenxc.com/2025/05/20/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85%EF%BC%882%EF%BC%89%E4%BA%8B%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
    <id>https://cadenxc.com/2025/05/20/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85%EF%BC%882%EF%BC%89%E4%BA%8B%E4%BB%B6%E7%B3%BB%E7%BB%9F/</id>
    <published>2025-05-20T06:38:50.000Z</published>
    <updated>2025-05-20T06:59:48.986Z</updated>
    
    <content type="html"><![CDATA[<p>视频学到了<a href="https://www.bilibili.com/video/BV1mw41187Ac?spm_id_from=333.788.videopod.episodes&vd_source=c7d1bbd34d9982d8b421763e8204f67d&p=22">S022</a>，分析一下Hazel的事件系统是如何实现的。</p><span id="more"></span><p>先看看Application类里如何处理jj下面这里的 变量层栈的for循环里，if(e.Handled)为true，就退出不处理了</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Application::OnEvent</span><span class="params">(Event&amp; e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">HZ_PROFILE_FUNCTION</span>();</span><br><span class="line"></span><br><span class="line"><span class="function">EventDispatcher <span class="title">dispatcher</span><span class="params">(e)</span></span>;</span><br><span class="line">dispatcher.<span class="built_in">Dispatch</span>&lt;WindowCloseEvent&gt;(<span class="built_in">HZ_BIND_EVENT_FN</span>(Application::OnWindowClose));</span><br><span class="line">dispatcher.<span class="built_in">Dispatch</span>&lt;WindowResizeEvent&gt;(<span class="built_in">HZ_BIND_EVENT_FN</span>(Application::OnWindowResize));</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it = m_LayerStack.<span class="built_in">rbegin</span>(); it != m_LayerStack.<span class="built_in">rend</span>(); ++it)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (e.Handled) </span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">(*it)-&gt;<span class="built_in">OnEvent</span>(e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里显示用了一个dispatcher来处理窗口关闭和窗口重定义大小，这里的写法是判断事件类型是否符合传入的Callback处理函数，如果匹配了，就设置Handled为true（看下面的OnWindowClose返回的true，这样异或为true）。看下面的循环，Handled为true会直接退出。</p><figure class="highlight c++"><figcaption><span>dispatch</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// F will be deduced by the compiler</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> F&gt;</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Dispatch</span><span class="params">(<span class="type">const</span> F&amp; func)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (m_Event.<span class="built_in">GetEventType</span>() == T::<span class="built_in">GetStaticType</span>())</span><br><span class="line">&#123;</span><br><span class="line">m_Event.Handled |= <span class="built_in">func</span>(<span class="built_in">static_cast</span>&lt;T&amp;&gt;(m_Event));</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">Application::OnWindowClose</span><span class="params">(WindowCloseEvent&amp; e)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        m_Running = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>下面这个事件处理返回的就是false，表示这个事件没有处理完，穿透层，下一层继续处理。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="type">bool</span> <span class="title">ImGuiLayer::OnMouseButtonPressedEvent</span><span class="params">(MouseButtonPressedEvent&amp; e)</span> </span>&#123;</span><br><span class="line">ImGuiIO&amp; io = ImGui::<span class="built_in">GetIO</span>();</span><br><span class="line">io.MouseDown[e.<span class="built_in">GetMouseButton</span>()] = <span class="literal">true</span>;</span><br><span class="line">      <span class="built_in">ET_CORE_TRACE</span>(e.<span class="built_in">ToString</span>());</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>这个Handled可以在层设置阻挡，ImGuiLayer这里的设置：<br>阻挡成功Handled就设置为true。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">ImGuiLayer::OnEvent</span><span class="params">(Event&amp; e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (m_BlockEvents)</span><br><span class="line">&#123;</span><br><span class="line">ImGuiIO&amp; io = ImGui::<span class="built_in">GetIO</span>();</span><br><span class="line">e.Handled |= e.<span class="built_in">IsInCategory</span>(EventCategoryMouse) &amp; io.WantCaptureMouse;</span><br><span class="line">e.Handled |= e.<span class="built_in">IsInCategory</span>(EventCategoryKeyboard) &amp; io.WantCaptureKeyboard;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么如何设置事件类型呢？<br>在事件发生的时候，glfw会自动调用下面我们在窗口初始化的时候设置的回调函数，这里的data.EventCallback(evnet)就是设置Event的类型</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">        <span class="comment">// Set GLFW callbacks</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">glfwSetWindowSizeCallback</span>(m_Window, [](GLFWwindow* window, <span class="type">int</span> width, <span class="type">int</span> height)</span><br><span class="line"></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            WindowData&amp; data = *(WindowData*)<span class="built_in">glfwGetWindowUserPointer</span>(window);</span><br><span class="line"></span><br><span class="line">            data.Width = width;</span><br><span class="line"></span><br><span class="line">            data.Height = height;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">            WindowResizeEvent <span class="built_in">event</span>(width, height);</span><br><span class="line"></span><br><span class="line">            data.<span class="built_in">EventCallback</span>(event);</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p>data的类型就是下面的函数指针</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> EventCallbackFn = std::function&lt;<span class="built_in">void</span>(Event&amp;)&gt;;</span><br></pre></td></tr></table></figure><p>这里提供了Event类型，EventDispatcher提供了处理事件的函数。<br>这就是我对整个事件系统的理解了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;视频学到了&lt;a href=&quot;https://www.bilibili.com/video/BV1mw41187Ac?spm_id_from=333.788.videopod.episodes&amp;vd_source=c7d1bbd34d9982d8b421763e8204f67d&amp;p=22&quot;&gt;S022&lt;/a&gt;，分析一下Hazel的事件系统是如何实现的。&lt;/p&gt;</summary>
    
    
    
    
    <category term="游戏引擎" scheme="https://cadenxc.com/tags/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/"/>
    
  </entry>
  
  <entry>
    <title>游戏引擎学习之旅（1）</title>
    <link href="https://cadenxc.com/2025/05/12/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85%EF%BC%881%EF%BC%89/"/>
    <id>https://cadenxc.com/2025/05/12/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85%EF%BC%881%EF%BC%89/</id>
    <published>2025-05-12T11:28:57.000Z</published>
    <updated>2025-05-27T03:14:22.681Z</updated>
    
    <content type="html"><![CDATA[<h2 id="现状"><a href="#现状" class="headerlink" title="现状"></a>现状</h2><p>c++：</p><ul><li>学了CS106L，AP-1400，作业大部分完成了；<br>图形学基础：</li><li><a href="https://sites.cs.ucsb.edu/~lingqi/teaching/games101.html">GAMES101</a>的视频课程看完了，作业写到了MVP变换渲染小奶牛。<br>游戏引擎：</li><li><a href="https://games104.boomingtech.com/en/">GAMES104</a>的视频教程视频，没做作业;</li><li>学过<a href="https://www.libsdl.org/">SDL2</a>；</li><li>跟着Brackeys入门了Godot的基本操作，对游戏引擎要实现的有一个基本的概念。<br>软件工程：</li><li>读了一些经典书籍：《代码大全》《人月神话》《软件开发心理学》；</li><li>其他相关：《Doom启示录》。</li></ul><h2 id="经历"><a href="#经历" class="headerlink" title="经历"></a>经历</h2><p>我先是学了两天的<a href="https://www.vulkan.org/">Vulkan</a>，然后看The Cherno 的 游戏引擎系列的s1~s15。</p><p>比较不自量力的是没有学过OpenGL，想着直接跳入Vulkan，自己用Vulkan写视频里的渲染部分代码。然后就发现Vulkan确实复杂，考虑到我以后很长一段时间都会向The Cherno学习，还是先去学习他的OpenGL系列比较好。而且他后面也用Vulkan，学会了OpenGL应该会让我更好学习Vulkan。</p><p>所以我就暂停学习引擎，去学习OpenGL了。现在看了20节的OpenGL，感觉OpenGL确实比Vulkan简单多了。绘制让我想到了SDL2，MVP变换让我想起了GAMES101，许多知识点开始连起来了。</p><h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>要有自知之明，脚踏实地。</p><p>The Cherno的视频确实很好，我学到了许多。</p><p>我接下来就是学习OpenGL，然后是学习游戏引擎，然后我就可以开始为Godot等开源代码做贡献了。</p><p>游戏和游戏引擎真的很有吸引力。游戏设计我不太懂，但是做游戏引擎的成就感和学到的技术是实打实的。技术成就真的会让我开心。</p><p>接下来的系列文章，大多是我的想法体会。如果你也在学习的路上，不妨来看看。</p>]]></content>
    
    
    <summary type="html">我过去12天的学习经历。</summary>
    
    
    
    
    <category term="游戏引擎" scheme="https://cadenxc.com/tags/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/"/>
    
  </entry>
  
  <entry>
    <title>英语学习经验分享</title>
    <link href="https://cadenxc.com/2025/05/09/%E8%8B%B1%E8%AF%AD%E5%AD%A6%E4%B9%A0%E7%BB%8F%E9%AA%8C/"/>
    <id>https://cadenxc.com/2025/05/09/%E8%8B%B1%E8%AF%AD%E5%AD%A6%E4%B9%A0%E7%BB%8F%E9%AA%8C/</id>
    <published>2025-05-09T14:37:24.000Z</published>
    <updated>2025-05-15T13:15:43.179Z</updated>
    
    <content type="html"><![CDATA[<p>我觉得的正确学习方式是“克拉申二语习得假说“。简单来说就是可理解输入，让自己沉浸在英语环境中，就像孩子一样自然习得英语。</p><span id="more"></span><p>下面是我学习英语的经验。</p><ul><li>把手机语言设置为英文；</li><li>读英文的技术书籍和文档；</li><li>看英文电影、动画；</li><li>把游戏语言调成英语；</li><li>写英文博客；</li><li>听英文播客。</li></ul><p>有些是一次性的。如把手机语言设置为英文。发朋友圈、微博说自己接下来要读完某本英文书，或是每天读半小时，通过一次轻松的行为安排了之后的一段时间。买一个会员，报个考试，通过公开承诺来约束自己。</p><p>最好的学习英语的方式就是用英语学习自己想学的东西。我在读英文技术书籍的时候会刻意挑选英文原版来锻炼自己的英文水平。国外大学的公开课英文的视频、网站和作业同时学技术和英文，是个一石二鸟的方式。</p><p>听播客是一个很好的英语输入途径。听不懂没关系，重要的是培养这个感觉。找到自己的i+1的材料，听就行了。</p><hr><p>资源推荐<br><a href="https://space.bilibili.com/323794482/video">罗肖尼Shawney的bilibili主页</a>，里面有有关英语学习的视频<br><a href="https://www.xiaoyuzhoufm.com/episode/631c9de1f3d15f16f4cc3270">牛顿探索加拿大的英语学习播客单集</a> ，别忘了shownote的书籍推荐<br><a href="https://book.douban.com/subject/35513147/">学会提问</a>，这本是提高写作技巧的书。<br><a href="https://store.steampowered.com/app/1265920/Life_is_Strange_Remastered/?l=schinese">Steam 上的 Life is Strange Remastered</a>，注意把语言调成英文。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;我觉得的正确学习方式是“克拉申二语习得假说“。简单来说就是可理解输入，让自己沉浸在英语环境中，就像孩子一样自然习得英语。&lt;/p&gt;</summary>
    
    
    
    
    <category term="英语" scheme="https://cadenxc.com/tags/%E8%8B%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>阅读《代码大全》</title>
    <link href="https://cadenxc.com/2025/04/27/%E9%98%85%E8%AF%BB%E3%80%8A%E4%BB%A3%E7%A0%81%E5%A4%A7%E5%85%A8%E3%80%8B/"/>
    <id>https://cadenxc.com/2025/04/27/%E9%98%85%E8%AF%BB%E3%80%8A%E4%BB%A3%E7%A0%81%E5%A4%A7%E5%85%A8%E3%80%8B/</id>
    <published>2025-04-27T10:26:23.000Z</published>
    <updated>2025-05-27T03:12:27.585Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://book.douban.com/subject/1477390/">《代码大全》</a>我读了两遍，先是读到英文版，后来又读了一边中文版。<br>读英文版时，我还想着“routine”该怎么翻译，结果看中文翻译翻成了“子程序”，意思没原文丰富。中英文版都不错完全推荐。</p><p>这本书讲的内容真的是软件工程的基础，跟我看完了感觉在各个方面长见识，但又很难说是什么，感觉就是为设计软件打了地基，知识成为了我的血液。书里的代码编写、变量命名、注释等我在其他的书籍视频里看过好几次，这本书把软件的方方面面串联起来，给了我一个大的画画。先读这本书会为软件工程打一个很好的基础。</p><p>全书令我影响深刻的观点论述有：</p><ul><li>用隐喻来学习；</li><li>软件工程就是管理复杂度；</li><li>不要陷进语言，自己定义用法；</li><li>伪代码编程过程；</li><li>最后几章的关于人的个性，布局排版的艺术。</li></ul><p>有些东西确实不太懂，毕竟我还没有在真实的工业环境里工作过，设计、编码、测试等技能没有经过检验。不只这本书，《clean code》里的后半部分我就不懂；《程序开发心理学》我读得挺有意思，但是每章结束后问管理者和程序员的问题我无法回答；不过《人月神话》没有讨论什么技术，谈的是思想，写得也好，不愧对它的声誉。</p>]]></content>
    
    
    <summary type="html">《代码大全》（code complete），非常有名的书籍，虽然现在的版本还是2004年出的，依然没有过时。</summary>
    
    
    
    
    <category term="书籍" scheme="https://cadenxc.com/tags/%E4%B9%A6%E7%B1%8D/"/>
    
  </entry>
  
</feed>
